
HRY_411_Project7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000882  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f6  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_6>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_11>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_12>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  7a:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CTC_Timer_Interrupt>:
	
}
void UDRE_Interrupt(){
	
}
void UTXC_Interrupt(){
  82:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <CurrProcess>
  86:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <CurrProcess+0x1>
  8a:	80 81       	ld	r24, Z
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 83       	st	Z, r24
  90:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <CurrProcess>
  94:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <CurrProcess+0x1>
  98:	80 81       	ld	r24, Z
  9a:	84 30       	cpi	r24, 0x04	; 4
  9c:	11 f4       	brne	.+4      	; 0xa2 <CTC_Timer_Interrupt+0x20>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
  a2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
  a6:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <__vector_6>:
	
}
// Interrupt Service Routines
ISR(TIMER1_COMPA_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	4f 93       	push	r20
  c0:	5f 93       	push	r21
  c2:	6f 93       	push	r22
  c4:	7f 93       	push	r23
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	CTC_Timer_Interrupt();
  d2:	0e 94 41 00 	call	0x82	; 0x82 <CTC_Timer_Interrupt>
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_11>:
ISR(USART_RXC_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
	RXC_Interrupt();
}
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_12>:
ISR(USART_UDRE_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
	UDRE_Interrupt();
}
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_13>:
ISR(USART_TXC_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
	UTXC_Interrupt();
}
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <initUART>:

void initUART(){

	UBRRL = LOW(UBRRValue);			// load baud prescale
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	89 b9       	out	0x09, r24	; 9
	UBRRH = HIGH(UBRRValue);		// to UBRR
 138:	10 bc       	out	0x20, r1	; 32

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE); // enable transmitter, receiver
 13a:	88 ed       	ldi	r24, 0xD8	; 216
 13c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);			//Set frame format: 8data, 1stop bit
 13e:	86 e8       	ldi	r24, 0x86	; 134
 140:	80 bd       	out	0x20, r24	; 32
 142:	08 95       	ret

00000144 <initPorts>:
}
void initPorts(){
	// 	Ports Initialization
	DDRA = 0xFF;	//Port A Initialization as output
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	8a bb       	out	0x1a, r24	; 26

	//	Enable Compare Interrupt
	TIMSK = (1<<OCIE1A);
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	89 bf       	out	0x39, r24	; 57
	OCR1AH = HIGH(LoopValue);
 14c:	8d e3       	ldi	r24, 0x3D	; 61
 14e:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = LOW(LoopValue);
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	8a bd       	out	0x2a, r24	; 42
	TCCR1B = (1<<CS11)|(1<<CS10)|(1<<WGM12);
 154:	8b e0       	ldi	r24, 0x0B	; 11
 156:	8e bd       	out	0x2e, r24	; 46
 158:	08 95       	ret

0000015a <initRam>:
}
void initRam(){
	
	// UART answer Initialization
	*UARTAnsAddress = ASCII_O;
 15a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <UARTAnsAddress>
 15e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <UARTAnsAddress+0x1>
 162:	8f e4       	ldi	r24, 0x4F	; 79
 164:	80 83       	st	Z, r24
	UARTAnsAddress += 1;
 166:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <UARTAnsAddress>
 16a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <UARTAnsAddress+0x1>
 16e:	cf 01       	movw	r24, r30
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <UARTAnsAddress+0x1>
 176:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <UARTAnsAddress>
	*UARTAnsAddress = ASCII_K;
 17a:	8b e4       	ldi	r24, 0x4B	; 75
 17c:	81 83       	std	Z+1, r24	; 0x01
	UARTAnsAddress += 1;
 17e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <UARTAnsAddress>
 182:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <UARTAnsAddress+0x1>
 186:	cf 01       	movw	r24, r30
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <UARTAnsAddress+0x1>
 18e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <UARTAnsAddress>
	*UARTAnsAddress = ASCII_CR;
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	81 83       	std	Z+1, r24	; 0x01
	UARTAnsAddress += 1;
 196:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <UARTAnsAddress>
 19a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <UARTAnsAddress+0x1>
	*UARTAnsAddress = ASCII_LF;
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	81 83       	std	Z+1, r24	; 0x01
	UARTAnsAddress += 1;
	UARTAnsAddress = (uint8_t *)0x0090;
 1a2:	80 e9       	ldi	r24, 0x90	; 144
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <UARTAnsAddress+0x1>
 1aa:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <UARTAnsAddress>
	
//	Instruction Address Initialization
	InstrAddress = (uint8_t *)0x00A0;
 1ae:	80 ea       	ldi	r24, 0xA0	; 160
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <InstrAddress+0x1>
 1b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <InstrAddress>

// 	Left RingCounter init
	*RingCounterL = 0b00000001;
 1ba:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <RingCounterL>
 1be:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <RingCounterL+0x1>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24

// 	Right RingCounter init	
	*RingCounterR = 0b10000000;
 1c6:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <RingCounterR>
 1ca:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <RingCounterR+0x1>
 1ce:	90 e8       	ldi	r25, 0x80	; 128
 1d0:	90 83       	st	Z, r25

// 	Led Toggle init
	*LedToggle = 0b01010101;
 1d2:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <LedToggle>
 1d6:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <LedToggle+0x1>
 1da:	95 e5       	ldi	r25, 0x55	; 85
 1dc:	90 83       	st	Z, r25

//	TimeSliceEND init
	*TimeSliceEND = 0;
 1de:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 1e2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 1e6:	10 82       	st	Z, r1
//	Current Process
	*CurrProcess = 0;
 1e8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <CurrProcess>
 1ec:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <CurrProcess+0x1>
 1f0:	10 82       	st	Z, r1
//	Process1 Active
	*Proc1Active = 1;
 1f2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Proc1Active>
 1f6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Proc1Active+0x1>
 1fa:	80 83       	st	Z, r24
//	Process2 Active
	*Proc2Active = 1;
 1fc:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Proc2Active>
 200:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Proc2Active+0x1>
 204:	80 83       	st	Z, r24
//	Process3 Active
	*Proc3Active = 1;
 206:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20e:	80 83       	st	Z, r24
 210:	08 95       	ret

00000212 <initialisation>:
}
void initialisation(void){
	
	//Chip Initializations
	initUART();
 212:	0e 94 9a 00 	call	0x134	; 0x134 <initUART>
	initPorts();
 216:	0e 94 a2 00 	call	0x144	; 0x144 <initPorts>
	initRam();
 21a:	0e 94 ad 00 	call	0x15a	; 0x15a <initRam>
	sei();
 21e:	78 94       	sei
 220:	08 95       	ret

00000222 <Proc1>:
}

void Proc1(){
			
		// 	Ringcounter Left
		if (*RingCounterL == 0b00000000)
 222:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <RingCounterL>
 226:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <RingCounterL+0x1>
 22a:	80 81       	ld	r24, Z
 22c:	81 11       	cpse	r24, r1
 22e:	03 c0       	rjmp	.+6      	; 0x236 <Proc1+0x14>
		{	
			*RingCounterL = 0b00000001;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 83       	st	Z, r24
 234:	03 c0       	rjmp	.+6      	; 0x23c <Proc1+0x1a>
		}else{
			*RingCounterL = *RingCounterL << 1;
 236:	80 81       	ld	r24, Z
 238:	88 0f       	add	r24, r24
 23a:	80 83       	st	Z, r24
		}
		
		PORTA = *RingCounterL;
 23c:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <RingCounterL>
 240:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <RingCounterL+0x1>
 244:	80 81       	ld	r24, Z
 246:	8b bb       	out	0x1b, r24	; 27
 248:	08 95       	ret

0000024a <Proc2>:
}

void Proc2(){
		
		// 	Ringcounter Right
		if (*RingCounterR == 0b00000000)
 24a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <RingCounterR>
 24e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <RingCounterR+0x1>
 252:	80 81       	ld	r24, Z
 254:	81 11       	cpse	r24, r1
 256:	03 c0       	rjmp	.+6      	; 0x25e <Proc2+0x14>
		{	
			*RingCounterR = 0b10000000;
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	80 83       	st	Z, r24
 25c:	03 c0       	rjmp	.+6      	; 0x264 <Proc2+0x1a>
		}else{
			*RingCounterR = *RingCounterR >> 1;
 25e:	80 81       	ld	r24, Z
 260:	86 95       	lsr	r24
 262:	80 83       	st	Z, r24
		}
		PORTA = *RingCounterR;
 264:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <RingCounterR>
 268:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <RingCounterR+0x1>
 26c:	80 81       	ld	r24, Z
 26e:	8b bb       	out	0x1b, r24	; 27
 270:	08 95       	ret

00000272 <Proc3>:
	// Return is not necessary because Compiler adds- return in disassembly
}

void Proc3(){
	
	*LedToggle = *LedToggle ^ 0b11111111;
 272:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <LedToggle>
 276:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <LedToggle+0x1>
 27a:	80 81       	ld	r24, Z
 27c:	80 95       	com	r24
 27e:	80 83       	st	Z, r24
	
	PORTA = *LedToggle;
 280:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <LedToggle>
 284:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <LedToggle+0x1>
 288:	80 81       	ld	r24, Z
 28a:	8b bb       	out	0x1b, r24	; 27
	
	*TimeSliceEND = 0;
 28c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 290:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 294:	10 82       	st	Z, r1
 296:	08 95       	ret

00000298 <main>:
	// Return is not necessary because Compiler adds- return in disassembly
}
int main(void)
{
    initialisation();
 298:	0e 94 09 01 	call	0x212	; 0x212 <initialisation>
    while (1) 
    {
			switch(*CurrProcess){
 29c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <CurrProcess>
 2a0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <CurrProcess+0x1>
 2a4:	80 81       	ld	r24, Z
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <main+0x2c>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <main+0x1c>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	c9 f5       	brne	.+114    	; 0x324 <main+0x8c>
 2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <main+0x3c>
					*TimeSliceEND = 0;
					
				break;
				case 3:
				
					while(*TimeSliceEND == 0)
 2b4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 2b8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	31 f1       	breq	.+76     	; 0x30e <main+0x76>
 2c2:	2e c0       	rjmp	.+92     	; 0x320 <main+0x88>
					*TimeSliceEND = 0;

				break;
				case 2:
				
					while(*TimeSliceEND == 0)
 2c4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 2c8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	99 f0       	breq	.+38     	; 0x2f8 <main+0x60>
 2d2:	1b c0       	rjmp	.+54     	; 0x30a <main+0x72>
    while (1) 
    {
			switch(*CurrProcess){
				case 1:
				
					while(*TimeSliceEND == 0){
 2d4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 2d8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 2dc:	80 81       	ld	r24, Z
 2de:	81 11       	cpse	r24, r1
 2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <main+0x5c>
						
					Proc1();
 2e2:	0e 94 11 01 	call	0x222	; 0x222 <Proc1>
    while (1) 
    {
			switch(*CurrProcess){
				case 1:
				
					while(*TimeSliceEND == 0){
 2e6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 2ea:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 2ee:	80 81       	ld	r24, Z
 2f0:	88 23       	and	r24, r24
 2f2:	b9 f3       	breq	.-18     	; 0x2e2 <main+0x4a>
						
					Proc1();
					
					}
					*TimeSliceEND = 0;
 2f4:	10 82       	st	Z, r1

				break;
 2f6:	d2 cf       	rjmp	.-92     	; 0x29c <main+0x4>
				case 2:
				
					while(*TimeSliceEND == 0)
					{
						Proc2();	
 2f8:	0e 94 25 01 	call	0x24a	; 0x24a <Proc2>
					*TimeSliceEND = 0;

				break;
				case 2:
				
					while(*TimeSliceEND == 0)
 2fc:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 300:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	b9 f3       	breq	.-18     	; 0x2f8 <main+0x60>
					{
						Proc2();	
					}
					*TimeSliceEND = 0;
 30a:	10 82       	st	Z, r1
					
				break;
 30c:	c7 cf       	rjmp	.-114    	; 0x29c <main+0x4>
				case 3:
				
					while(*TimeSliceEND == 0)
					{
						Proc3();	
 30e:	0e 94 39 01 	call	0x272	; 0x272 <Proc3>
					*TimeSliceEND = 0;
					
				break;
				case 3:
				
					while(*TimeSliceEND == 0)
 312:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TimeSliceEND>
 316:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TimeSliceEND+0x1>
 31a:	80 81       	ld	r24, Z
 31c:	88 23       	and	r24, r24
 31e:	b9 f3       	breq	.-18     	; 0x30e <main+0x76>
					{
						Proc3();	
					}
					*TimeSliceEND = 0;
 320:	10 82       	st	Z, r1
					
				break;
 322:	bc cf       	rjmp	.-136    	; 0x29c <main+0x4>
				default:
				CTC_Timer_Interrupt();
 324:	0e 94 41 00 	call	0x82	; 0x82 <CTC_Timer_Interrupt>
				break;
 328:	b9 cf       	rjmp	.-142    	; 0x29c <main+0x4>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
