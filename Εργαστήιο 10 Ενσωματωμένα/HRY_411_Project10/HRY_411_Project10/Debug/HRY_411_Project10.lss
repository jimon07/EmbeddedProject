
HRY_411_Project10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bc  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  7a:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initialisation>:

volatile int *matrix1 = (int *)0x0070;
volatile int *matrix2 = (int *)0x0082;
volatile int *output = (int *)0x0094;

void initialisation(){
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i<9; i++)
	{	
		matrix1[i] = i;
  86:	9c 01       	movw	r18, r24
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <matrix1>
  90:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <matrix1+0x1>
  94:	e2 0f       	add	r30, r18
  96:	f3 1f       	adc	r31, r19
  98:	91 83       	std	Z+1, r25	; 0x01
  9a:	80 83       	st	Z, r24
  9c:	01 96       	adiw	r24, 0x01	; 1
volatile int *matrix1 = (int *)0x0070;
volatile int *matrix2 = (int *)0x0082;
volatile int *output = (int *)0x0094;

void initialisation(){
	for (uint8_t i = 0; i<9; i++)
  9e:	89 30       	cpi	r24, 0x09	; 9
  a0:	91 05       	cpc	r25, r1
  a2:	89 f7       	brne	.-30     	; 0x86 <initialisation+0x4>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	{	
		matrix1[i] = i;
	}
	for (uint8_t i = 0;i<9;i++)
	{
		matrix2[i] = i;
  a8:	9c 01       	movw	r18, r24
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <matrix2>
  b2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <matrix2+0x1>
  b6:	e2 0f       	add	r30, r18
  b8:	f3 1f       	adc	r31, r19
  ba:	91 83       	std	Z+1, r25	; 0x01
  bc:	80 83       	st	Z, r24
  be:	01 96       	adiw	r24, 0x01	; 1
void initialisation(){
	for (uint8_t i = 0; i<9; i++)
	{	
		matrix1[i] = i;
	}
	for (uint8_t i = 0;i<9;i++)
  c0:	89 30       	cpi	r24, 0x09	; 9
  c2:	91 05       	cpc	r25, r1
  c4:	89 f7       	brne	.-30     	; 0xa8 <initialisation+0x26>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
	{
		matrix2[i] = i;
	}
	for(uint8_t i=0;i<9;i++)
	{
		output[i] = 0;
  ca:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	10 82       	st	Z, r1
  da:	02 96       	adiw	r24, 0x02	; 2
	}
	for (uint8_t i = 0;i<9;i++)
	{
		matrix2[i] = i;
	}
	for(uint8_t i=0;i<9;i++)
  dc:	82 31       	cpi	r24, 0x12	; 18
  de:	91 05       	cpc	r25, r1
  e0:	a1 f7       	brne	.-24     	; 0xca <initialisation+0x48>
	{
		output[i] = 0;
	}
}
  e2:	08 95       	ret

000000e4 <matrixmult>:
void matrixmult(){
  e4:	4f 92       	push	r4
  e6:	5f 92       	push	r5
  e8:	6f 92       	push	r6
  ea:	7f 92       	push	r7
  ec:	8f 92       	push	r8
  ee:	9f 92       	push	r9
  f0:	af 92       	push	r10
  f2:	bf 92       	push	r11
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	for(uint8_t i=0; i<3; i++)
	{
		for(uint8_t j=0; j<3; j++)
		{
			
		output[3*i+j] = matrix1[3*i]*matrix2[j] + matrix1[3*i+1]*matrix2[j+3] + matrix1[3*i+2]*matrix2[j+6];
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	5b c0       	rjmp	.+182    	; 0x1c0 <matrixmult+0xdc>
 10a:	9c 01       	movw	r18, r24
 10c:	26 0f       	add	r18, r22
 10e:	37 1f       	adc	r19, r23
 110:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 118:	2f 01       	movw	r4, r30
 11a:	42 0e       	add	r4, r18
 11c:	53 1e       	adc	r5, r19
 11e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <matrix1>
 122:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <matrix1+0x1>
 126:	d9 01       	movw	r26, r18
 128:	a6 0d       	add	r26, r6
 12a:	b7 1d       	adc	r27, r7
 12c:	cd 90       	ld	r12, X+
 12e:	dc 90       	ld	r13, X
 130:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <matrix2>
 134:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <matrix2+0x1>
 138:	da 01       	movw	r26, r20
 13a:	a8 0f       	add	r26, r24
 13c:	b9 1f       	adc	r27, r25
 13e:	ed 90       	ld	r14, X+
 140:	fc 90       	ld	r15, X
 142:	d9 01       	movw	r26, r18
 144:	aa 0d       	add	r26, r10
 146:	bb 1d       	adc	r27, r11
 148:	0d 91       	ld	r16, X+
 14a:	1c 91       	ld	r17, X
 14c:	dc 01       	movw	r26, r24
 14e:	16 96       	adiw	r26, 0x06	; 6
 150:	a4 0f       	add	r26, r20
 152:	b5 1f       	adc	r27, r21
 154:	cd 91       	ld	r28, X+
 156:	dc 91       	ld	r29, X
 158:	d9 01       	movw	r26, r18
 15a:	a8 0d       	add	r26, r8
 15c:	b9 1d       	adc	r27, r9
 15e:	0d 90       	ld	r0, X+
 160:	bc 91       	ld	r27, X
 162:	a0 2d       	mov	r26, r0
 164:	9c 01       	movw	r18, r24
 166:	24 5f       	subi	r18, 0xF4	; 244
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	24 0f       	add	r18, r20
 16c:	35 1f       	adc	r19, r21
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	31 81       	ldd	r19, Z+1	; 0x01
 174:	ce 9c       	mul	r12, r14
 176:	a0 01       	movw	r20, r0
 178:	cf 9c       	mul	r12, r15
 17a:	50 0d       	add	r21, r0
 17c:	de 9c       	mul	r13, r14
 17e:	50 0d       	add	r21, r0
 180:	11 24       	eor	r1, r1
 182:	0c 9f       	mul	r16, r28
 184:	70 01       	movw	r14, r0
 186:	0d 9f       	mul	r16, r29
 188:	f0 0c       	add	r15, r0
 18a:	1c 9f       	mul	r17, r28
 18c:	f0 0c       	add	r15, r0
 18e:	11 24       	eor	r1, r1
 190:	4e 0d       	add	r20, r14
 192:	5f 1d       	adc	r21, r15
 194:	a2 9f       	mul	r26, r18
 196:	e0 01       	movw	r28, r0
 198:	a3 9f       	mul	r26, r19
 19a:	d0 0d       	add	r29, r0
 19c:	b2 9f       	mul	r27, r18
 19e:	d0 0d       	add	r29, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	4c 0f       	add	r20, r28
 1a4:	5d 1f       	adc	r21, r29
 1a6:	f2 01       	movw	r30, r4
 1a8:	51 83       	std	Z+1, r21	; 0x01
 1aa:	40 83       	st	Z, r20
 1ac:	02 96       	adiw	r24, 0x02	; 2
	}
}
void matrixmult(){
	for(uint8_t i=0; i<3; i++)
	{
		for(uint8_t j=0; j<3; j++)
 1ae:	86 30       	cpi	r24, 0x06	; 6
 1b0:	91 05       	cpc	r25, r1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <matrixmult+0xd2>
 1b4:	aa cf       	rjmp	.-172    	; 0x10a <matrixmult+0x26>
 1b6:	6a 5f       	subi	r22, 0xFA	; 250
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		output[i] = 0;
	}
}
void matrixmult(){
	for(uint8_t i=0; i<3; i++)
 1ba:	62 31       	cpi	r22, 0x12	; 18
 1bc:	71 05       	cpc	r23, r1
 1be:	61 f0       	breq	.+24     	; 0x1d8 <matrixmult+0xf4>
	{
		for(uint8_t j=0; j<3; j++)
		{
			
		output[3*i+j] = matrix1[3*i]*matrix2[j] + matrix1[3*i+1]*matrix2[j+3] + matrix1[3*i+2]*matrix2[j+6];
 1c0:	3b 01       	movw	r6, r22
 1c2:	5b 01       	movw	r10, r22
 1c4:	f2 e0       	ldi	r31, 0x02	; 2
 1c6:	af 0e       	add	r10, r31
 1c8:	b1 1c       	adc	r11, r1
 1ca:	4b 01       	movw	r8, r22
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	88 0e       	add	r8, r24
 1d0:	91 1c       	adc	r9, r1
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	99 cf       	rjmp	.-206    	; 0x10a <matrixmult+0x26>
		
		}
	}
	
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	bf 90       	pop	r11
 1ea:	af 90       	pop	r10
 1ec:	9f 90       	pop	r9
 1ee:	8f 90       	pop	r8
 1f0:	7f 90       	pop	r7
 1f2:	6f 90       	pop	r6
 1f4:	5f 90       	pop	r5
 1f6:	4f 90       	pop	r4
 1f8:	08 95       	ret

000001fa <main>:
int main(void)
{
    initialisation();
 1fa:	0e 94 41 00 	call	0x82	; 0x82 <initialisation>
	matrixmult();
 1fe:	0e 94 72 00 	call	0xe4	; 0xe4 <matrixmult>
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x8>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
