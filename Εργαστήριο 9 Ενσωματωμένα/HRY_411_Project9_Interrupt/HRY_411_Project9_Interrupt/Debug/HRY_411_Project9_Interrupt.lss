
HRY_411_Project9_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cb  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_1>
   8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  7a:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Ext_Int_0>:
// 2 bits for switch checking
volatile uint8_t *count = (uint8_t *)0x0090;
volatile uint8_t *count1 = (uint8_t *)0x0091;
volatile uint8_t *lastBounced = (uint8_t *)0x0092;

void Ext_Int_0(){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	
	if (*count > *count1 && *count >=2 && *count1 == 0 && *lastBounced == 1)
  86:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <count>
  8a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <count+0x1>
  8e:	90 81       	ld	r25, Z
  90:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <count1>
  94:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <count1+0x1>
  98:	8c 91       	ld	r24, X
  9a:	89 17       	cp	r24, r25
  9c:	e0 f4       	brcc	.+56     	; 0xd6 <Ext_Int_0+0x54>
  9e:	80 81       	ld	r24, Z
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	c8 f0       	brcs	.+50     	; 0xd6 <Ext_Int_0+0x54>
  a4:	8c 91       	ld	r24, X
  a6:	81 11       	cpse	r24, r1
  a8:	16 c0       	rjmp	.+44     	; 0xd6 <Ext_Int_0+0x54>
  aa:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	88 81       	ld	r24, Y
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	79 f4       	brne	.+30     	; 0xd6 <Ext_Int_0+0x54>
	{
		// Means that A in PD2 is bouncing PD3(A') => Stable
		PORTA = 0b00000100&(~(PIND&(1<<PD3))>> 1);
  b8:	80 b3       	in	r24, 0x10	; 16
  ba:	88 70       	andi	r24, 0x08	; 8
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	80 95       	com	r24
  c0:	90 95       	com	r25
  c2:	95 95       	asr	r25
  c4:	87 95       	ror	r24
  c6:	84 70       	andi	r24, 0x04	; 4
  c8:	8b bb       	out	0x1b, r24	; 27
		*lastBounced = 0;	
  ca:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	10 82       	st	Z, r1
  d4:	10 c0       	rjmp	.+32     	; 0xf6 <Ext_Int_0+0x74>
	}
	else if(*count > 0 && *count1 > 0)
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	51 f0       	breq	.+20     	; 0xf0 <Ext_Int_0+0x6e>
  dc:	8c 91       	ld	r24, X
  de:	88 23       	and	r24, r24
  e0:	39 f0       	breq	.+14     	; 0xf0 <Ext_Int_0+0x6e>
	{
		*count = 0;
  e2:	10 82       	st	Z, r1
		*count1 = 0;
  e4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <count1>
  e8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <count1+0x1>
  ec:	10 82       	st	Z, r1
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <Ext_Int_0+0x74>
	}
	else
	{
		*count += 1;	
  f0:	80 81       	ld	r24, Z
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 83       	st	Z, r24
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <Ext_Int_1>:
void Ext_Int_1(){
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	
	if (*count1 > *count && *count1 >=2 && *count == 0 && *lastBounced == 0)
 100:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <count1>
 104:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <count1+0x1>
 108:	90 81       	ld	r25, Z
 10a:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <count>
 10e:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <count+0x1>
 112:	8c 91       	ld	r24, X
 114:	89 17       	cp	r24, r25
 116:	b8 f4       	brcc	.+46     	; 0x146 <Ext_Int_1+0x4a>
 118:	80 81       	ld	r24, Z
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	a0 f0       	brcs	.+40     	; 0x146 <Ext_Int_1+0x4a>
 11e:	8c 91       	ld	r24, X
 120:	81 11       	cpse	r24, r1
 122:	11 c0       	rjmp	.+34     	; 0x146 <Ext_Int_1+0x4a>
 124:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12c:	88 81       	ld	r24, Y
 12e:	81 11       	cpse	r24, r1
 130:	0a c0       	rjmp	.+20     	; 0x146 <Ext_Int_1+0x4a>
	{
		// Means that A' in PD3 is bouncing PD2(A) => Stable
		PORTA = 0b00000100 &((PIND&(1<<PD2)));
 132:	80 b3       	in	r24, 0x10	; 16
 134:	84 70       	andi	r24, 0x04	; 4
 136:	8b bb       	out	0x1b, r24	; 27
		*lastBounced = 1;
 138:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
 144:	10 c0       	rjmp	.+32     	; 0x166 <Ext_Int_1+0x6a>
	}
	else if(*count > 0 && *count1 > 0)
 146:	8c 91       	ld	r24, X
 148:	88 23       	and	r24, r24
 14a:	51 f0       	breq	.+20     	; 0x160 <Ext_Int_1+0x64>
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	39 f0       	breq	.+14     	; 0x160 <Ext_Int_1+0x64>
	{
		*count = 0;
 152:	1c 92       	st	X, r1
		*count1 = 0;
 154:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <count1>
 158:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <count1+0x1>
 15c:	10 82       	st	Z, r1
 15e:	03 c0       	rjmp	.+6      	; 0x166 <Ext_Int_1+0x6a>
	}
	else{	
		*count1 += 1;
 160:	80 81       	ld	r24, Z
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 83       	st	Z, r24
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <__vector_1>:

// Interrupt Service Routines
ISR(INT0_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	Ext_Int_0();
 18e:	0e 94 41 00 	call	0x82	; 0x82 <Ext_Int_0>
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_2>:
ISR(INT1_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	Ext_Int_1();	
 1d6:	0e 94 7e 00 	call	0xfc	; 0xfc <Ext_Int_1>
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <initPorts>:
void initPorts(){
	
// 	Ports Initialization
	DDRA = 0b00000100;	//Port A Initialization: bit 2 as output and the others as inputs
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b00000000;	//PortD as Input
 200:	11 ba       	out	0x11, r1	; 17
	PORTA = 0b00000100;
 202:	8b bb       	out	0x1b, r24	; 27
	
// 	Any logical change on PD2 and PD3 generates a request
	MCUCR = (1<<ISC10)|(1<<ISC00);
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	85 bf       	out	0x35, r24	; 53
//	Enable interrupts from PD2 and PD3
	GICR = (1<<INT0)|(1<<INT1);
 208:	80 ec       	ldi	r24, 0xC0	; 192
 20a:	8b bf       	out	0x3b, r24	; 59
//	Initialisation of counters
	*count = 0;
 20c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <count>
 210:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <count+0x1>
 214:	10 82       	st	Z, r1
	*count1 = 0;
 216:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <count1>
 21a:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <count1+0x1>
 21e:	10 82       	st	Z, r1
//	Start position;
	*lastBounced = 0;
 220:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 224:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 228:	10 82       	st	Z, r1
 22a:	08 95       	ret

0000022c <initialisation>:

}
void initialisation(void){
	
//	Chip Initializations
	initPorts();
 22c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <initPorts>
	sei();
 230:	78 94       	sei
 232:	08 95       	ret

00000234 <main>:
}
int main(void)
{	
   initialisation();
 234:	0e 94 16 01 	call	0x22c	; 0x22c <initialisation>
 238:	ff cf       	rjmp	.-2      	; 0x238 <main+0x4>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
