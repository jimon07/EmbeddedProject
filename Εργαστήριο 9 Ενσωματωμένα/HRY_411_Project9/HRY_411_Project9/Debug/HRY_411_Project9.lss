
HRY_411_Project9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b5  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_6>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  7a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CTC_Timer_Interrupt>:
volatile uint8_t *output = (uint8_t *)0x0093;

void CTC_Timer_Interrupt(){
	
// 	bit 0 = A and bit 1 = A'
	*switch1 = (PINA&(1<<PA0))|(PINA&(1<<PA1));
  82:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <switch1>
  86:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <switch1+0x1>
  8a:	99 b3       	in	r25, 0x19	; 25
  8c:	89 b3       	in	r24, 0x19	; 25
  8e:	91 70       	andi	r25, 0x01	; 1
  90:	82 70       	andi	r24, 0x02	; 2
  92:	89 2b       	or	r24, r25
  94:	80 83       	st	Z, r24
	
//	if both switch values are the same reset counter
	if ((*switch1 == 3) || (*switch1 == 0))
  96:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <switch1>
  9a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <switch1+0x1>
  9e:	80 81       	ld	r24, Z
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	19 f0       	breq	.+6      	; 0xaa <CTC_Timer_Interrupt+0x28>
  a4:	80 81       	ld	r24, Z
  a6:	81 11       	cpse	r24, r1
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <CTC_Timer_Interrupt+0x32>
	{
		*count = 0;
  aa:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	10 82       	st	Z, r1
	}
//	if both switch values are the same start counting
	if (((*switch1 == 1)||(*switch1 == 2))&&(*prev == *switch1)){
  b4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <switch1>
  b8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <switch1+0x1>
  bc:	80 81       	ld	r24, Z
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	19 f0       	breq	.+6      	; 0xc8 <CTC_Timer_Interrupt+0x46>
  c2:	80 81       	ld	r24, Z
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	79 f4       	brne	.+30     	; 0xe6 <CTC_Timer_Interrupt+0x64>
  c8:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <prev>
  cc:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <prev+0x1>
  d0:	9c 91       	ld	r25, X
  d2:	80 81       	ld	r24, Z
  d4:	98 13       	cpse	r25, r24
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <CTC_Timer_Interrupt+0x64>
		*count +=1;
  d8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  dc:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 81       	ld	r24, Z
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 83       	st	Z, r24
	}
//	if for 10 consecutive times we have the same values then the switch is stable
	if (*count == 10)
  e6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ee:	80 81       	ld	r24, Z
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	51 f4       	brne	.+20     	; 0x108 <CTC_Timer_Interrupt+0x86>
	{	
		// Output the correct output in PORTA bit 2 including previous values of PORTA.
		PORTA= ((PINA&(1<<PA0)) << PA2);
  f4:	89 b3       	in	r24, 0x19	; 25
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	88 0f       	add	r24, r24
  fa:	88 0f       	add	r24, r24
  fc:	8b bb       	out	0x1b, r24	; 27
		
		*count = 0;
  fe:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	10 82       	st	Z, r1
	}
//	Save the switch values to evaluate next time
	*prev = *switch1;
 108:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <prev>
 10c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <prev+0x1>
 110:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <switch1>
 114:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <switch1+0x1>
 118:	8c 91       	ld	r24, X
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <__vector_6>:
	return;
}
// Interrupt Service Routines
ISR(TIMER1_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	CTC_Timer_Interrupt();
 140:	0e 94 41 00 	call	0x82	; 0x82 <CTC_Timer_Interrupt>
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <initPorts>:
void initPorts(){
	
// 	Ports Initialization
	DDRA = 0b00000100;	//Port A Initialization: bit 2 as output and the others as inputs
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	8a bb       	out	0x1a, r24	; 26

//	Enable Compare Interrupt
	TIMSK = (1<<OCIE1A);
 16a:	80 e1       	ldi	r24, 0x10	; 16
 16c:	89 bf       	out	0x39, r24	; 57
// 	Compare Register gets value of 625 for 0.5 ms
	OCR1AH = HIGH(LoopValue);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = LOW(LoopValue);
 172:	81 e7       	ldi	r24, 0x71	; 113
 174:	8a bd       	out	0x2a, r24	; 42
//	Prescale 1/8 and CTC mode
	TCCR1B = (1<<CS11)|(1<<WGM12);
 176:	8a e0       	ldi	r24, 0x0A	; 10
 178:	8e bd       	out	0x2e, r24	; 46
	*switch1 = 0b00000000; 
 17a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <switch1>
 17e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <switch1+0x1>
 182:	10 82       	st	Z, r1
	*switch1 = 0b00000000; 
 184:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <switch1>
 188:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <switch1+0x1>
 18c:	10 82       	st	Z, r1
 18e:	08 95       	ret

00000190 <initialisation>:
}
void initialisation(void){
	
//	Chip Initializations
	initPorts();
 190:	0e 94 b3 00 	call	0x166	; 0x166 <initPorts>
	sei();
 194:	78 94       	sei
 196:	08 95       	ret

00000198 <main>:
}
int main(void)
{
   initialisation();
 198:	0e 94 c8 00 	call	0x190	; 0x190 <initialisation>
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x4>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
